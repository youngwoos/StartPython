df
# Chunk 114
mpg['total'] = (mpg['cty'] + mpg['hwy'])/2  # 통합 연비 변수 생성
# Chunk 115
mpg.info()
mpg['total'].mean()
# Chunk 117
mpg['total'].describe()  # 요약 통계량 산출
# Chunk 119
mpg['total'].plot(kind = 'hist')      # 히스토그램 생성
plt.show()
# Chunk 120
mpg['total'].plot(kind = 'hist')      # 히스토그램 생성
plt.show()
# Chunk 121
knitr::include_graphics('img/ifelse.png')
# Chunk 122
import numpy as np
# 20 이상이면 pass, 그렇지 않으면 fail 부여
mpg['test'] = np.where(mpg['total'] >= 20, 'pass', 'fail')
# Chunk 123
mpg['test'].head(20)
# Chunk 124
mpg[['total', 'test']].head(20)
# Chunk 125
count_test = mpg['test'].value_counts()  # 연비 합격 빈도표 생성
count_test
# Chunk 127
count_test.plot(kind = 'bar')            # 빈도 막대 그래프 생성
plt.show()
```
---
#### 빈도표, 막대 그래프로 합격 판정 자동차 수 살펴보기
# Chunk 128
count_test = mpg['test'].value_counts()  # 연비 합격 빈도표 생성
count_test
# Chunk 130
count_test.plot(kind = 'bar', rot = 0)   # 빈도 막대 그래프 생성
plt.show()
```
---
---
### 중첩 조건문 활용하기 - 연비 등급 변수 만들기
.left[
&nbsp; 등급|&nbsp; &nbsp;total 기준
----|---
&nbsp; &nbsp; A &nbsp; &nbsp;   |&nbsp; &nbsp; 30 이상 &nbsp; &nbsp;
&nbsp; &nbsp; B &nbsp; &nbsp;   |&nbsp; &nbsp; 20~29 &nbsp; &nbsp;
&nbsp; &nbsp; C &nbsp; &nbsp;   |&nbsp; &nbsp; 20 미만 &nbsp; &nbsp;
]
<br><br><br><br><br><br><br>
--
# Chunk 131
# total 기준으로 A, B, C 등급 부여
mpg['grade'] = np.where(mpg['total'] >= 30, 'A',
np.where(mpg['total'] >= 20, 'B', 'C'))
# Chunk 132
mpg[['total', 'test', 'grade']].head(20)
# Chunk 133
count_grade = mpg['grade'].value_counts()  # 등급 빈도표 생성
count_grade
# Chunk 135
count_grade.plot(kind = 'bar', rot = 0)    # 빈도 막대 그래프 생성
plt.show()
```
---
#### 빈도표, 막대 그래프로 연비 등급 살펴보기
# Chunk 136
count_grade = mpg['grade'].value_counts().sort_index()  # 등급 빈도표 생성, index 정렬
count_grade
# Chunk 138
count_grade.plot(kind = 'bar', rot = 0)    # 빈도 막대 그래프 생성
plt.show()
# Chunk 143
midwest = pd.read_csv('data_midwest.csv')
# Chunk 144
midwest = midwest.rename(columns = {'poptotal' : 'total'})
midwest = midwest.rename(columns = {'popasian' : 'asian'})
# Chunk 145
midwest.info()
# Chunk 147
midwest['ratio'] = midwest['asian']/midwest['total']*100
midwest['ratio'].plot(kind = 'hist')
plt.show()
# Chunk 148
midwest['ratio'].mean()
midwest['group'] = np.where(midwest['ratio'] > 0.4872, 'large', 'small')
# Chunk 151
count_group = midwest['group'].value_counts()
count_group
# Chunk 152
count_group.plot(kind = 'bar', rot = 0)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
len(df)
length(df)
length(df)
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('02_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('01_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
knitr::include_graphics('img/np.where2.png')
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
mpg[mpg['manufacturer'] == 'audi'] /
.sort_values('hwy', ascending = False)/
.head(5)
mpg[mpg['manufacturer'] == 'audi'] /
.sort_values('hwy', ascending = False)/
.head(5)
reticulate::repl_python()
mpg[mpg['manufacturer'] == 'audi'] /
.sort_values('hwy', ascending = False)/
.head(5)
mpg[mpg['manufacturer'] == 'audi'] /
.sort_values('hwy', ascending = False) /
.head(5)
reticulate::repl_python()
ggplot2::mpg %>%
filter(manufacturer == 'audi') %>%  # audi 추출
arrange(desc(hwy)) %>%              # hwy 내림차순 정렬
head(5)                             # 5행까지 출력
mpg
library(tidyverse)
mpg %>%
filter(manufacturer == 'audi') %>%  # audi 추출
arrange(desc(hwy)) %>%              # hwy 내림차순 정렬
head(5)                             # 5행까지 출력
xaringan:::inf_mr()
xaringan:::inf_mr()
library(tidyverse)
mpg %>%
filter(manufacturer == 'audi') %>%  # audi 추출
arrange(desc(hwy)) %>%              # hwy 내림차순 정렬
head(5)                             # 5행까지 출력
source('~/.active-rstudio-document', echo=TRUE)
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
exam.assign(total = exam['math'] + exam['english'] + exam['science'],
mean = total/4)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
exam.groupby('class').agg(mean_math   = ('math', 'mean'),    # class별로 분리
sum_math    = ('math', 'sum'),     # 수학 점수 평균
median_math = ('math', 'median'),  # 수학 점수 중앙값
n           = 'count')  # 빈도: 학생 수
reticulate::repl_python()
mpg.groupby(['manufacturer', 'drv']).agg(mean_cty = ('cty', 'mean')).reset_indeX()
mpg.groupby(['manufacturer', 'drv']).agg(mean_cty = ('cty', 'mean')).reset_index()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
ggplot2::mpg %>%
count(drv, class)
ggplot2::mpg %>%
count(drv, class) %>%
mutate(ratio = n/sum(n))
ggplot2::mpg %>%
count(drv, class) %>%
mutate(ratio = n/sum(n)*100)
ggplot2::mpg %>%
count(drv, class) %>%
mutate(ratio = n/sum(n)*100)
reticulate::repl_python()
ggplot2::mpg %>%
count(drv, class) %>%
mutate(ratio = n/sum(n)*100)
ggplot2::mpg %>%
group_by(drv, class) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)*100)
reticulate::repl_python()
sns.scatterplot(data = mpg, x = 'displ', y = 'hwy')
set(xlim=(3,6))
plt.show()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
write.csv(ggplot2::economics, 'data_economics.csv', fileEncoding = 'UTF-8')
write.csv(ggplot2::economics, 'data_economics.csv', fileEncoding = 'UTF-8', row.names = F)
write.csv(ggplot2::mpg, 'data_mpg.csv', fileEncoding = 'UTF-8', row.names = F)
write.csv(ggplot2::midwest, 'data_midwest.csv', fileEncoding = 'UTF-8', row.names = F)
reticulate::repl_python()
reticulate::source_python('~/Project/StartPython/etc.py')
reticulate::repl_python()
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
pd.to_Datetime(conomics['date'])
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
ggplot2::economics
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('01_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
options(repr.plot.width = 14, repr.plot.height = 8)
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::py_config()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::py_config()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::py_config()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::py_config()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::py_config()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::py_config()
reticulate::py_config()
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::repl_python()
xaringan:::inf_mr()
detach('package:reticulate', unload = TRUE)
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::py_config()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::py_config()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
df_mpg = mpg.groupby('drv')['hwy'].mean() \
.reset_index() \
.sort_values('hwy', ascending=False) \
.rename(columns = ('hwy' : 'mean_hwy'))
df_mpg
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
plt.rcParams['figure.figsize'] = [6, 4]
unlink('03_StartPython_cache', recursive = TRUE)
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
reticulate::py_config()
xaringan:::inf_mr()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::py_config()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('03_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
