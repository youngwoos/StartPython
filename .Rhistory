# Chunk 109
knitr::include_graphics('img/new_var.png')
# Chunk 110
df = pd.DataFrame({'var1' : [4, 3, 8],
'var2' : [2, 6, 1]})
df
# Chunk 111
df['var_sum'] = df['var1'] + df['var2']  # var_sum 파생변수 생성
df
# Chunk 112
df['var_mean'] = (df['var1'] + df['var2'])/2  # var_mean 파생변수 생성
df
# Chunk 113
mpg['total'] = (mpg['cty'] + mpg['hwy'])/2  # 통합 연비 변수 생성
# Chunk 114
mpg.info()
mpg['total'].mean()
# Chunk 116
mpg['total'].describe()  # 요약 통계량 산출
# Chunk 118
mpg['total'].plot(kind = 'hist')      # 히스토그램 생성
plt.show()
# Chunk 119
mpg['total'].plot(kind = 'hist')      # 히스토그램 생성
plt.show()
# Chunk 120
knitr::include_graphics('img/ifelse.png')
# Chunk 121
import numpy as np
# 20 이상이면 pass, 그렇지 않으면 fail 부여
mpg['test'] = np.where(mpg['total'] >= 20, 'pass', 'fail')
# Chunk 122
mpg['test'].head(20)
# Chunk 123
mpg[['total', 'test']].head(20)
# Chunk 124
count_test = mpg['test'].value_counts()  # 연비 합격 빈도표 생성
count_test
# Chunk 126
count_test.plot(kind = 'bar')            # 빈도 막대 그래프 생성
plt.show()
```
---
#### 빈도표, 막대 그래프로 합격 판정 자동차 수 살펴보기
# Chunk 127
count_test = mpg['test'].value_counts()  # 연비 합격 빈도표 생성
count_test
# Chunk 129
count_test.plot(kind = 'bar', rot = 0)   # 빈도 막대 그래프 생성
plt.show()
```
---
---
### 중첩 조건문 활용하기 - 연비 등급 변수 만들기
.left[
&nbsp; 등급|&nbsp; &nbsp;total 기준
----|---
&nbsp; &nbsp; A &nbsp; &nbsp;   |&nbsp; &nbsp; 30 이상 &nbsp; &nbsp;
&nbsp; &nbsp; B &nbsp; &nbsp;   |&nbsp; &nbsp; 20~29 &nbsp; &nbsp;
&nbsp; &nbsp; C &nbsp; &nbsp;   |&nbsp; &nbsp; 20 미만 &nbsp; &nbsp;
]
<br><br><br><br><br><br><br>
--
# Chunk 130
# total 기준으로 A, B, C 등급 부여
mpg['grade'] = np.where(mpg['total'] >= 30, 'A',
np.where(mpg['total'] >= 20, 'B', 'C'))
# Chunk 131
mpg[['total', 'test', 'grade']].head(20)
# Chunk 132
count_grade = mpg['grade'].value_counts()  # 등급 빈도표 생성
count_grade
# Chunk 134
count_grade.plot(kind = 'bar', rot = 0)    # 빈도 막대 그래프 생성
plt.show()
```
---
#### 빈도표, 막대 그래프로 연비 등급 살펴보기
# Chunk 135
count_grade = mpg['grade'].value_counts().sort_index()  # 등급 빈도표 생성, index 정렬
count_grade
# Chunk 137
count_grade.plot(kind = 'bar', rot = 0)    # 빈도 막대 그래프 생성
plt.show()
# Chunk 142
midwest = pd.read_csv('data_midwest.csv')
# Chunk 143
midwest = midwest.rename(columns = {'poptotal' : 'total'})
midwest = midwest.rename(columns = {'popasian' : 'asian'})
# Chunk 144
midwest.info()
# Chunk 146
midwest['ratio'] = midwest['asian']/midwest['total']*100
midwest['ratio'].plot(kind = 'hist')
plt.show()
# Chunk 147
midwest['ratio'].mean()
midwest['group'] = np.where(midwest['ratio'] > 0.4872, 'large', 'small')
# Chunk 150
count_group = midwest['group'].value_counts()
count_group
# Chunk 151
count_group.plot(kind = 'bar', rot = 0)
reticulate::use_virtualenv("r-reticulate")
# Chunk 1: setup
xaringanExtra::use_tile_view()
library(knitr)
library(icon)
# Chunk 2
reticulate::use_virtualenv("r-reticulate")
reticulate::py_available(T)
# Chunk 3
knitr::opts_chunk$set(cache = T, warning = F, message = F, fig.retina = 3)
# code highlighting
hook_source = knitr::knit_hooks$get('source')
knitr::knit_hooks$set(source = function(x, options) {
x = stringr::str_replace(x, '^[[:blank:]]?([^*].+?)[[:blank:]]*#<<[[:blank:]]*$', '*\\1')
hook_source(x, options)
})
# Chunk 4
include_graphics('https://raw.githubusercontent.com/youngwoos/Doit_textmining/main/cover.png')
# Chunk 5
import pandas as pd
import seaborn as sns
# Chunk 6
mpg = pd.read_csv('data_mpg.csv')
# Chunk 7
mpg.head()
# Chunk 8
mpg.shape
# Chunk 9
mpg.info()
# Chunk 10
mpg.describe()
# Chunk 11
mpg.groupby('manufacturer')\
.agg(mean_hwy = ('hwy', 'mean'))\
.sort_values('mean_hwy', ascending = False)\
.reset_index()
# Chunk 13
import statsmodels.api as sm
mpg['const'] = 1
x = mpg[['const', 'displ']]
y = mpg['hwy']
mod = sm.OLS(y, x).fit()
mod.summary()
# Chunk 15
import matplotlib.pyplot as plt
p = sns.lmplot(data = mpg, x = 'displ', y = 'hwy', ci = False)
plt.tight_layout()
plt.show()
# Chunk 16
mpg
```
---
# Chunk 17
mpg['hwy'].mean()
# Chunk 18
mpg['hwy'].max()
```
---
# Chunk 19
mpg['hwy'].plot(kind = 'hist')
# Chunk 20
a = 1
a
# Chunk 21
b = 2
b
c = 3
c
ab = 3.5
ab
# Chunk 22
a + b
a + b + c
4 / b
5 * b
# Chunk 23
d = [1, 2, 3]
d
e = [3, 4, 5]
e
# Chunk 24
d + e
# Chunk 25
a2 = 'a'
a2
b2 = 'text'
b2
c2 = 'Hello world!'
c2
# Chunk 26
d2 = ['a', 'b', 'c']
d2
e2 = ['Hello!', 'World', 'is', 'good!']
e2
# Chunk 27
b2 + c2
# Chunk 28
b2 + ' ' + c2
# Chunk 30
b2 + 2
# Chunk 31
a = [1, 2, 3]
a
# Chunk 32
sum(a)  # 합계
# Chunk 33
max(a)  # 최대값
min(a)  # 최소값
len(a)  # 길이
# Chunk 34
del mpg
del pd
# Chunk 35
mpg.head()
# Chunk 36
mpg = pd.read_csv('data_mpg.csv')
# Chunk 37
import pandas as pd
mpg = pd.read_csv('data_mpg.csv')
mpg.head()
# Chunk 38
pd.read_csv('data_mpg.csv')
# Chunk 39
a = ['a', 'a', 'b', 'c']
a
# Chunk 40
pd.value_counts(a)
# Chunk 43
mpg = pd.read_csv('data_mpg.csv')
type(mpg)
# Chunk 44
mpg.head()
# Chunk 45
mpg.info()
# Chunk 46
a = [1, 2, 3]
type(a)
# Chunk 47
a.info()
# Chunk 53
mpg.head()
# Chunk 54
mpg.head(n = 10)
# Chunk 55
mpg.head(n = 3)
# Chunk 57
import seaborn as sns
g = sns.relplot(data = mpg, x = 'displ', y = 'hwy')
plt.tight_layout()
plt.show()
# Chunk 59
g = sns.relplot(data = mpg, x = 'displ', y = 'hwy', hue = 'cyl')
plt.tight_layout()
plt.show()
# Chunk 61
g = sns.relplot(data = mpg, x = 'displ', y = 'hwy', hue = 'drv')
plt.tight_layout()
plt.show()
# Chunk 63
g = sns.relplot(data = mpg, x = 'displ', y = 'hwy', hue = 'drv', marker = 'x')
plt.tight_layout()
plt.show()
# Chunk 65
knitr::include_graphics("img/autocomplation.png")
# Chunk 66
df = pd.DataFrame({'history' : [90, 80, 60, 70],
'math' : [50, 60, 100, 20],
'class' : [1, 1, 2, 2]})
df
# Chunk 67
df['history']
# Chunk 68
df['math']
# Chunk 69
sum(df['history'])
# Chunk 70
sum(df['history'])/4
# Chunk 71
df['math']
# Chunk 72
sum(df['math'])
# Chunk 73
sum(df['math'])/4
# Chunk 75
df_finalexam = pd.read_excel('finalexam.xlsx',)
df_finalexam
# Chunk 76
df_finalexam['math'].mean()
# Chunk 77
df_finalexam['history'].mean()
# Chunk 78
df_finalexam['english'].mean()
# Chunk 79
df_finalexam.mean()
# Chunk 80
pd.read_csv('csv_exam.csv')
# Chunk 81
if 'csv_exam' in globals() : del csv_exam
# Chunk 82
csv_exam
# Chunk 83
csv_exam = pd.read_csv('csv_exam.csv')
csv_exam
# Chunk 84
df_finalexam.to_csv('output_newdata.csv')
# Chunk 85
df_finalexam.to_csv('output_newdata2.csv', index = False)
# Chunk 86
df_finalexam.to_excel('output_newdata3.xlsx')
# Chunk 87
df_finalexam.to_excel('output_newdata4.xlsx', index = False)
# Chunk 89
exam = pd.read_csv('csv_exam.csv')
exam
# Chunk 90
exam.head()    # 앞에서부터 5행까지 출력
exam.head(10)  # 앞에서부터 10행까지 출력
# Chunk 91
exam.tail()    # 뒤에서부터 5행까지 출력
exam.tail(10)  # 뒤에서부터 10행까지 출력
# Chunk 92
exam.shape  # 행, 열 출력
# Chunk 93
exam.info()  # 데이터 속성 확인
# Chunk 94
exam.describe()  # 요약 통계량 출력
# Chunk 95
# mpg 데이터 불러오기
mpg = pd.read_csv('data_mpg.csv')
# Chunk 96
mpg.head()  # 데이터 앞부분 확인
# Chunk 97
mpg.tail()  # 데이터 뒷부분 확인
# Chunk 98
mpg.shape  # 행, 열 출력
# Chunk 99
mpg.info()  # 데이터 속성 확인
# Chunk 100
mpg.describe() # 요약 통계량 출력
# Chunk 101
df_raw = pd.DataFrame({'var1' : [1, 2, 1],
'var2' : [2, 3, 2]})
df_raw
# Chunk 102
df_new = df_raw  # 복사본 생성
df_new           # 출력
# Chunk 103
df_new = df_new.rename(columns = {'var2' : 'v2'})  # var2를 v2로 수정
df_new
# Chunk 104
df_raw
# Chunk 105
mpg = pd.read_csv('data_mpg.csv')
mpg_new = mpg
mpg_new = mpg_new.rename(columns = {'cty' : 'city'})     # cty를 city로 수정
mpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})  # cty를 city로 수정
mpg_new.head(5)
# Chunk 106
mpg = pd.read_csv('data_mpg.csv')  # mpg 데이터 불러오기
mpg_new = mpg                      # 복사본 만들기
# Chunk 107
mpg_new = mpg_new.rename(columns = {'cty' : 'city'})     # cty를 city로 수정
mpg_new = mpg_new.rename(columns = {'hwy' : 'highway'})  # cty를 city로 수정
# Chunk 108
mpg_new.head(5)  # 데이터 일부 출력
# Chunk 110
knitr::include_graphics('img/new_var.png')
# Chunk 111
df = pd.DataFrame({'var1' : [4, 3, 8],
'var2' : [2, 6, 1]})
df
# Chunk 112
df['var_sum'] = df['var1'] + df['var2']  # var_sum 파생변수 생성
df
# Chunk 113
df['var_mean'] = (df['var1'] + df['var2'])/2  # var_mean 파생변수 생성
df
# Chunk 114
mpg['total'] = (mpg['cty'] + mpg['hwy'])/2  # 통합 연비 변수 생성
# Chunk 115
mpg.info()
mpg['total'].mean()
# Chunk 117
mpg['total'].describe()  # 요약 통계량 산출
# Chunk 119
mpg['total'].plot(kind = 'hist')      # 히스토그램 생성
plt.show()
# Chunk 120
mpg['total'].plot(kind = 'hist')      # 히스토그램 생성
plt.show()
# Chunk 121
knitr::include_graphics('img/ifelse.png')
# Chunk 122
import numpy as np
# 20 이상이면 pass, 그렇지 않으면 fail 부여
mpg['test'] = np.where(mpg['total'] >= 20, 'pass', 'fail')
# Chunk 123
mpg['test'].head(20)
# Chunk 124
mpg[['total', 'test']].head(20)
# Chunk 125
count_test = mpg['test'].value_counts()  # 연비 합격 빈도표 생성
count_test
# Chunk 127
count_test.plot(kind = 'bar')            # 빈도 막대 그래프 생성
plt.show()
```
---
#### 빈도표, 막대 그래프로 합격 판정 자동차 수 살펴보기
# Chunk 128
count_test = mpg['test'].value_counts()  # 연비 합격 빈도표 생성
count_test
# Chunk 130
count_test.plot(kind = 'bar', rot = 0)   # 빈도 막대 그래프 생성
plt.show()
```
---
---
### 중첩 조건문 활용하기 - 연비 등급 변수 만들기
.left[
&nbsp; 등급|&nbsp; &nbsp;total 기준
----|---
&nbsp; &nbsp; A &nbsp; &nbsp;   |&nbsp; &nbsp; 30 이상 &nbsp; &nbsp;
&nbsp; &nbsp; B &nbsp; &nbsp;   |&nbsp; &nbsp; 20~29 &nbsp; &nbsp;
&nbsp; &nbsp; C &nbsp; &nbsp;   |&nbsp; &nbsp; 20 미만 &nbsp; &nbsp;
]
<br><br><br><br><br><br><br>
--
# Chunk 131
# total 기준으로 A, B, C 등급 부여
mpg['grade'] = np.where(mpg['total'] >= 30, 'A',
np.where(mpg['total'] >= 20, 'B', 'C'))
# Chunk 132
mpg[['total', 'test', 'grade']].head(20)
# Chunk 133
count_grade = mpg['grade'].value_counts()  # 등급 빈도표 생성
count_grade
# Chunk 135
count_grade.plot(kind = 'bar', rot = 0)    # 빈도 막대 그래프 생성
plt.show()
```
---
#### 빈도표, 막대 그래프로 연비 등급 살펴보기
# Chunk 136
count_grade = mpg['grade'].value_counts().sort_index()  # 등급 빈도표 생성, index 정렬
count_grade
# Chunk 138
count_grade.plot(kind = 'bar', rot = 0)    # 빈도 막대 그래프 생성
plt.show()
# Chunk 143
midwest = pd.read_csv('data_midwest.csv')
# Chunk 144
midwest = midwest.rename(columns = {'poptotal' : 'total'})
midwest = midwest.rename(columns = {'popasian' : 'asian'})
# Chunk 145
midwest.info()
# Chunk 147
midwest['ratio'] = midwest['asian']/midwest['total']*100
midwest['ratio'].plot(kind = 'hist')
plt.show()
# Chunk 148
midwest['ratio'].mean()
midwest['group'] = np.where(midwest['ratio'] > 0.4872, 'large', 'small')
# Chunk 151
count_group = midwest['group'].value_counts()
count_group
# Chunk 152
count_group.plot(kind = 'bar', rot = 0)
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
xaringan:::inf_mr()
len(df)
length(df)
length(df)
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
unlink('02_StartPython_cache', recursive = TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
xaringan:::inf_mr()
reticulate::repl_python()
xaringan:::inf_mr()
reticulate::repl_python()
reticulate::repl_python()
